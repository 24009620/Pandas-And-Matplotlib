import datetime
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime as dt
# Load the CSV file
df = pd.read_csv('C:\\Users\\24009620\\downloads\\CSV\\Task4A.csv', index_col='ID')
# Main menu
def menu():
print("\t\t****MAIN MENU****")
print('1) Enter sales records')
print('2) Run reports')
print('3) Region reports')
x = int(input(""))
return x
# Reports menu
def menu2():
print("**** Reports Dashboard ****")
print("1. Individual Employee Report")
print("2. Highest employee")
x = int(input(""))
return x
def menu3():
print("**** Reports Dashboard ****")
print("1. Sales of Regions ")
x = int(input(""))
return x
def ind_emp_check(df_r, id, date1, date2):
df_r = df_r.loc[df.index == id]
df_r = df_r.T[3:] # Assuming first 3 rows are not needed for the report
df_r.reset_index(inplace=True)
df_r['ID1'] = pd.to_datetime(df_r['index'], format='%d/%m/%Y')
date1 = pd.to_datetime(date1, format='%d/%m/%Y')
date2 = pd.to_datetime(date2, format='%d/%m/%Y')
mask = (df_r['ID1'] >= date1) & (df_r['ID1'] <= date2)
df_search = df_r.loc[mask]
print(df_search)
print('Total by id = {} is {}'.format(id, sum(df_search[id])))
plt.bar(df_search['index'], df_search[id])
plt.xticks(rotation=90)
plt.show()
def get_value_for_region(region, date):
date_str = date.strftime('%d/%m/%Y')
if date_str in df.columns:
return df.loc[df['Region'] == region, date_str].sum()
return 0
def find_highest_sales(df):
total_sales = df.iloc[:, 4:].sum(axis=1)
highest_sales = total_sales.max()
top_employees = total_sales[total_sales == highest_sales]
return top_employees
regions = df['Region'].unique()
region_map = {i + 1: region for i, region in enumerate(regions)}
y = menu()
while y == 1 or y == 2 or y == 3:
if y == 1:
try:
ID = int(input("Enter the Staff ID: "))
if ID not in df.index.values:
print('ID not found. Please enter a valid ID.')
date1 = input("Enter Date in dd/mm/yyyy: ")
day, month, year = date1.split("/")
date1 = datetime.date(int(year), int(month), int(day))
if datetime.datetime.strptime(date1.strftime('%d/%m/%Y'), '%d/%m/%Y') >
datetime.datetime.strptime(
dt.today().strftime('%d/%m/%Y'), '%d/%m/%Y'):
print("Date is in the future")
else:
cost = float(input("Enter the cost: "))
df.loc[ID, date1.strftime('%d/%m/%Y')] = cost
except Exception as e:
print("\n\nError Occurred: {}\nPlease try again\n\n".format(e))
y = menu()
if y == 2:
x = menu2()
if x == 1:
try:
id = int(input("Enter the Employee Id: "))
s_date = input("Enter Starting Date in dd/mm/yyyy: ")
day, month, year = s_date.split("/")
s_date = datetime.date(int(year), int(month), int(day))
e_date = input("Enter End Date in dd/mm/yyyy: ")
day, month, year = e_date.split("/")
e_date = datetime.date(int(year), int(month), int(day))
ind_emp_check(df, id, s_date, e_date)
except:
print("\n\nError Occurred: {}\nPlease try again\n\n".format(e))
x = menu2()
elif x == 2:
try:
top_employees = find_highest_sales(df)
print("Employees with the highest sales values:")
for employee_id, sales in top_employees.items():
print(f"Employee ID: {employee_id}, Total Sales: {sales}")
except:
print("\n\nError Occurred: {}\nPlease try again\n\n".format(e))
x = menu2()
elif y == 3:
x = menu3()
if x == 1:
try:
print("*****Regions*****")
for key, value in region_map.items():
print(f"{key}) {value}")
Region = int(input("Input a Region: "))
if Region not in region_map:
print("Invalid region selected. Please try again.")
continue
s_date = input("Enter Starting Date in dd/mm/yyyy: ")
day, month, year = s_date.split("/")
s_date = datetime.date(int(year), int(month), int(day))
e_date = input("Enter End Date in dd/mm/yyyy: ")
day, month, year = e_date.split("/")
e_date = datetime.date(int(year), int(month), int(day))
total_sum = 0
current_date = s_date
while current_date <= e_date:
value = get_value_for_region(region_map[Region], current_date)
total_sum += value
current_date += datetime.timedelta(days=1)
print(f"The total sum from {s_date} to {e_date} for region
{region_map[Region]} is: {total_sum}")
except Exception as e:
print("\n\nError Occurred: {}\nPlease try again\n\n".format(e))
else:
x = menu()
y = menu()
